from . import MemoryMixin
import time
storetime = 0
loadtime = 0
write_time_cost=0
read_time_cost=0

class TestwrapperMixin(MemoryMixin):

    def timed_write(f):
        def timed(*args, **kw):
            ts = time.time()
            result = f(*args, **kw)
            te = time.time()
            global write_time_cost
            write_time_cost = write_time_cost + (te - ts)


            return result

        return timed

    def timed_read(f):
        def timed(*args, **kw):
            ts = time.time()
            result = f(*args, **kw)
            te = time.time()
            global read_time_cost
            read_time_cost = read_time_cost + (te - ts)


            return result

        return timed



    @timed_write
    def store(self, addr, data, size=None, condition=None, **kwargs):
        global storetime
        storetime=storetime+1

        return super().store(addr, data,
                             size=size,
                             condition=condition,
                             **kwargs)

    @timed_read
    def load(self, addr, size=None, condition=None, fallback=None, **kwargs):
        global loadtime
        loadtime = loadtime+1


        return super().load(addr, size=size, condition=condition, fallback=fallback, **kwargs)
